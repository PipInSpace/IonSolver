#[allow(unused)]
pub const LOGO_COLOR: &str = "_____________________________________________________________________________________________________________________________
                        \x1b[94m....:...                  
                 :+**%@@@@@@@@@@@@%*-.            
          .-=+#@@@@@@@@@@@@@@@@@@@@@@@@*:         
       :*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:       
      -%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+      
     \x1b[96m.. \x1b[94m*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.    
     \x1b[96m-@+ \x1b[94m.*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%    
     \x1b[96m+@@%+ \x1b[94m.=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=   
     \x1b[96m%@@@@#   \x1b[94m=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*   
     \x1b[96m@@@@@@#.  \x1b[94m.=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@#       \x1b[0m_____  _____  __   _ _______  _____         _    _ _______  ______
    \x1b[96m.@@@@@@@%     \x1b[94m*@@@@@@@@@@@@@@@@@@@@@@@@@@@#       \x1b[0m  |   |     | | \\  | |______ |     | |       \\  /  |______ |_____/
    \x1b[96m:@@@@@@@@-     \x1b[94m.=%@@@@@@@@@@@@@@@@@@@@@@@@#       \x1b[0m__|__ |_____| |  \\_| ______| |_____| |_____   \\/   |______ |    \\_
    \x1b[96m:@@@@@@@@-        \x1b[94m*@@@@@@@@@@@@@@@@@@@@@@@*   
    \x1b[96m=@@@@@@@%   :*.    \x1b[94m.*@@@@@@@@@@@@@@@@@@@@@=   
    \x1b[96m+@@@@@@@.  .@@@*.    \x1b[94m.*@@@@@@@@@@@@@@@@@@@.   
    \x1b[96m%@@@@@@:   +@@@@@*.    \x1b[94m.*@@@@@@@@@@@@@@@@*    
    \x1b[96m@@@@@@-    :++==-.       \x1b[94m.=#@@@@@@@@@@@@#     
    \x1b[96m@@@@@=          .-++++:.    \x1b[94m=@@@@@@@@@@%.     
   \x1b[96m.@@@@:      .-*%@@@@@@@@@%*=: .\x1b[94m=%@@@@@@@.      
   \x1b[96m.@@@:    .=%@@@@@@@@@@@@@@@@@%:  \x1b[94m*@@@@@=       
   \x1b[96m:@#:  .+%@@@@@@@@@@@@@@@@@@@@@@%+ \x1b[94m.=%@*        
   \x1b[96m:-  -%@@@@@@@@@@@@@@@@@@@@@@@@%##*-  \x1b[94m=         
     \x1b[96m:+*++=====----::....\x1b[0m                         
_____________________________________________________________________________________________________________________________";

#[allow(unused)]
pub const LOGO: &str = "_____________________________________________________________________________________________________________________________
                        ....:...                  
                 :+**%@@@@@@@@@@@@%*-.            
          .-=+#@@@@@@@@@@@@@@@@@@@@@@@@*:         
       :*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:       
      -%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+      
     .. *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.    
     -@+ .*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%    
     +@@%+ .=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=   
     %@@@@#   =@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*   
     @@@@@@#.  .=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@#       _____  _____  __   _ _______  _____         _    _ _______  ______
    .@@@@@@@%     *@@@@@@@@@@@@@@@@@@@@@@@@@@@#         |   |     | | \\  | |______ |     | |       \\  /  |______ |_____/
    :@@@@@@@@-     .=%@@@@@@@@@@@@@@@@@@@@@@@@#       __|__ |_____| |  \\_| ______| |_____| |_____   \\/   |______ |    \\_
    :@@@@@@@@-        *@@@@@@@@@@@@@@@@@@@@@@@*   
    =@@@@@@@%   :*.    .*@@@@@@@@@@@@@@@@@@@@@=   
    +@@@@@@@.  .@@@*.    .*@@@@@@@@@@@@@@@@@@@.   
    %@@@@@@:   +@@@@@*.    .*@@@@@@@@@@@@@@@@*    
    @@@@@@-    :++==-.       .=#@@@@@@@@@@@@#     
    @@@@@=          .-++++:.    =@@@@@@@@@@%.     
   .@@@@:      .-*%@@@@@@@@@%*=: .=%@@@@@@@.      
   .@@@:    .=%@@@@@@@@@@@@@@@@@%:  *@@@@@=       
   :@#:  .+%@@@@@@@@@@@@@@@@@@@@@@%+ .=%@*        
   :-  -%@@@@@@@@@@@@@@@@@@@@@@@@%##*-  =         
     :+*++=====----::....                       
_____________________________________________________________________________________________________________________________";

pub fn progressbar(fill: f32) -> String {
    // Returns a "progress bar" string with the provided fill level
    let length: u32 = 20;
    let fill_percent = (fill * 100.0) as u32;
    let fill = fill.clamp(0.0, 1.0);
    let mut string = "[".to_string();
    let fill_length = (length as f32 * fill).round() as u32;
    for _ in 0..fill_length {
        string += "="
    }
    for _ in 0..(length - fill_length) {
        string += " "
    }
    string += &format!("] {}%", fill_percent);

    string
}

pub fn sim_speed(step_c: u32, t_p_s: u32, mn: u64) {
    print!(
        "\rStep {}, Steps/s: {}, MLUP/s: {}                      ",
        step_c,
        1000000 / t_p_s,
        (mn * 1000000) / t_p_s as u64
    );
    _ = std::io::Write::flush(&mut std::io::stdout());
}
